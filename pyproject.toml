[tool.poetry]
name = "TODO"
version = "0.1.0"
description = "TODO"
authors = ["graviton5000@gmail.com",]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "0.75.1"
uvicorn = "0.17.6"
toml = "0.10.2"
sqlalchemy = "1.4.34"
click = "8.1.3"
asyncpg = "0.25.0"
greenlet = "1.1.2"

[tool.poetry.dev-dependencies]
black = "22.3.0"
isort = "5.10.1"
pylint = "2.13.4"
pytest = "7.1.1"
pycodestyle = "2.8.0"
sqlalchemy2-stubs = "0.0.2-alpha.21"
types-toml = "0.10.4"
pytest-cov = "3.0.0"
pydocstyle = "6.1.1"
types-pyyaml = "6.0.5"
mypy = "0.942"
alembic = "1.7.7"
pytest-asyncio = "0.18.3"
pytest-mock = "^3.7.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 90
target-version = ["py39"]

[tool.isort]
profile = "black"
line_length = 90
src_paths = [
    "app",
    "tests",
    "cicd",
    "commands",
    "functional_tests",
    "migrations",
    "run",
    "server",
    "task_queue",
    "utils",
]
skip = [".venv"]

[tool.pydocstyle]
select = [
    # Missing Docstrings
    # "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    # "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    # "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__

    # Whitespace Issues
    "D200", # One-line docstring should fit on one line with quotes
    "D201", # No blank lines allowed before function docstring
    # "D202", # No blank lines allowed after function docstring
    # "D203", # 1 blank line required before class docstring
    "D204", # 1 blank line required after class docstring
    "D205", # 1 blank line required between summary line and description
    "D206", # Docstring should be indented with spaces, not tabs
    "D207", # Docstring is under-indented
    "D208", # Docstring is over-indented
    "D209", # Multi-line docstring closing quotes should be on a separate line
    "D210", # No whitespaces allowed surrounding docstring text
    "D211", # No blank lines allowed before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    # "D213", # Multi-line docstring summary should start at the second line
    "D214", # Section is over-indented
    "D215", # Section underline is over-indented

    # Quotes Issues
    "D300", # Use “”“triple double quotes”“”
    "D301", # Use r”“” if any backslashes in a docstring
    # "D302", # Use u”“” for Unicode docstrings

    # Docstring Content Issues
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood; try rephrasing
    "D402", # First line should not be the function’s “signature”
    "D403", # First word of the first line should be properly capitalized
    "D404", # First word of the docstring should not be This
    "D405", # Section name should be properly capitalized
    "D406", # Section name should end with a newline
    # "D407", # Missing dashed underline after section
    "D408", # Section underline should be in the line following the section’s name
    "D409", # Section underline should match the length of its name
    "D410", # Missing blank line after section
    "D411", # Missing blank line before section
    # "D412", # No blank lines allowed between a section header and its content
    "D413", # Missing blank line after last section
    "D414", # Section has no content
]
# All dirs except versions
match-dir="^(?!versions).*"

[tool.mypy]
ignore_missing_imports = true
warn_unused_ignores = true
allow_redefinition = true
strict_equality = true
show_error_codes = true
disallow_incomplete_defs = true
no_implicit_optional = false
disable_error_code = ["misc"]

plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

exclude = "migrations"

[tool.pylint.master]
ignore = ["versions"]
jobs = 0  # autodetecting CPU count
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.docstyle",
    "pylint.extensions.comparetozero",
    "pylint.extensions.docparams",
    "pylint.extensions.emptystring",
    "pylint.extensions.mccabe",
]
suggestion-mode = true
extension-pkg-allow-list = ["pydantic"]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "logging-fstring-interpolation",
    "logging-format-interpolation",
    "no-self-use",
    "too-few-public-methods",
    "global-statement",
    "unnecessary-pass",
    "wildcard-import",
    "unused-wildcard-import",
    "no-member",
    "useless-param-doc",
    "useless-type-doc",
    "bad-mcs-classmethod-argument",
    "redefined-variable-type",
    "protected-access"
]

[tool.pylint.base]
good-names = ["i", "j", "k", "ex", "Run", "_", "e", "ns", "id", "T", "O", "F"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata", "res", "result", "record"]
const-rgx = "(([A-z_][A-z0-9_]*)|(__.*__))$"

[tool.pylint.typecheck]
ignored-modules = ["alembic.context"]
ignored-classes = [
    "SQLObject",
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "scoped_session"
]
ignored-parents = []
generated-members = ["REQUEST", "acl_users", "aq_parent"]
min-public-methods = 2

[tool.pylint.similarities]
ignore-imports = true

[tool.pylint.format]
max-module-lines = 2000
max-line-length = 120

[tool.pylint.design]
min-public-methods = 2
exclude-too-few-public-methods = ""

[tool.coverage.run]
branch = true
omit = [
    "*venv\\*",
    "*/.venv/*",
    "*/.pycharm_helpers/*",
    "\\*helpers\\pycharm\\*",
    "/usr/share/python3/*",
]

[tool.coverage.report]
skip_covered = true
show_missing = true
fail_under = 0
exclude_lines = [
    "pragma: no cover",
]
partial_branches = [
    "pragma: no branch",
    "assert",
]
sort = "Cover"

[tool.pyright]
reportMissingTypeStubs = true
useLibraryCodeForTypes = true

